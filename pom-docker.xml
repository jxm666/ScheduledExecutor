<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.haima</groupId>
	<artifactId>regeneration</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>regeneration</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<!-- 配置mavn-docker 打包插件 -->
		<docker.repo>harbor-test-01.cloudplay.com:5006</docker.repo>
		<project.prefix.name>opqa_mozi_code</project.prefix.name>
		<assembly.name>regeneration</assembly.name>
		<project.env.type>test</project.env.type>
	</properties>

	<dependencies>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.49</version>
		</dependency>

		<!-- <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> 
			<version>1.2.17</version> </dependency> -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.8.0-alpha2</version>
		</dependency>

	</dependencies>
    
    <build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
			</plugin>
			<!-- 跳过单元测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			 <plugin>
                <artifactId> maven-assembly-plugin </artifactId>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>com.haima.regeneration.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<configuration>
							<tasks>
								<copy todir="${project.build.directory}/docker">
									<fileset dir="${project.build.directory}">
										<include name="*.jar" />
									</fileset>
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<!-- <version>2.1.5</version> -->
				<executions>
					<execution>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--日期格式;默认值:dd.MM.yyyy '@' HH:mm:ss z; -->
					<dateFormat>yyyyMMddHHmmss</dateFormat>
					<!--,构建过程中,是否打印详细信息;默认值:false; -->
					<verbose>true</verbose>
					<!-- ".git"文件路径;默认值:${project.basedir}/.git; -->
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<!--若项目打包类型为pom,是否取消构建;默认值:true; -->
					<skipPoms>false</skipPoms>
					<!--是否生成"git.properties"文件;默认值:false; -->
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<!--指定"git.properties"文件的存放路径(相对于${project.basedir}的一个路径); -->
					<generateGitPropertiesFilename>git.properties</generateGitPropertiesFilename>
					<!--".git"文件夹未找到时,构建是否失败;若设置true,则构建失败;若设置false,则跳过执行该目标;默认值:true; -->
					<failOnNoGitDirectory>true</failOnNoGitDirectory>

					<!--git描述配置,可选;由JGit提供实现; -->
					<gitDescribe>
						<!--是否生成描述属性 -->
						<skip>false</skip>
						<!--提交操作未发现tag时,仅打印提交操作ID, -->
						<always>false</always>
						<!--提交操作ID显式字符长度,最大值为:40;默认值:7; 0代表特殊意义;后面有解释; -->
						<abbrev>7</abbrev>
						<!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:""; -->
						<dirty>-dirty</dirty>
						<!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" 
							format, even if "on" a tag. The distance will always be 0 if you're "on" 
							the tag. -->
						<forceLongFormat>false</forceLongFormat>
					</gitDescribe>
				</configuration>
			</plugin>

			<!-- docker -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<imageName>${assembly.name}:${git.commit.id.abbrev}</imageName>
					<dockerDirectory>${project.basedir}/docker</dockerDirectory>
					<serverId>harbor-test-01</serverId>
					<registryUrl>${docker.repo}</registryUrl>
				</configuration>

				<executions>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<imageName>${assembly.name}:${project.version}-${git.commit.id.abbrev}</imageName>
							<dockerDirectory>${project.basedir}/docker</dockerDirectory>
						</configuration>
					</execution>
					<execution>
						<id>tag-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<image>${assembly.name}:${project.version}-${git.commit.id.abbrev}</image>
							<newName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:${project.version}-${git.commit.id.abbrev}</newName>
							<forceTags>true</forceTags>
						</configuration>
					</execution>
					<execution>
						<id>tag-version-latest-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<newName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:${project.version}-latest</newName>
							<image>${assembly.name}:${project.version}-${git.commit.id.abbrev}</image>
							<forceTags>true</forceTags>
						</configuration>
					</execution>
					<execution>
						<id>tag-latest-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<image>${assembly.name}:${project.version}-${git.commit.id.abbrev}</image>
							<newName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:latest</newName>
							<forceTags>true</forceTags>
						</configuration>
					</execution>
					<execution>
						<id>push-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:${project.version}-${git.commit.id.abbrev}
							</imageName>
						</configuration>
					</execution>
					<execution>
						<id>push-version-latest-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:${project.version}-latest
							</imageName>
						</configuration>
					</execution>
					<execution>
						<id>push-latest-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.repo}/${project.prefix.name}-${project.env.type}/${assembly.name}:latest
							</imageName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
	<pluginRepositories>
		<pluginRepository>
			<id>releases</id>
			<name>Haima Nexus Releases Repository</name>
			<url>http://mvn-dev.haima.me:8081/nexus/content/groups/public/</url>
		</pluginRepository>
		<pluginRepository>
			<id>snapshots</id>
			<name>Haima Nexus Snapshots Repository</name>
			<url>http://mvn-dev.haima.me:8081/nexus/content/repositories/snapshots</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<id>releases</id>
			<url>私有maven仓库地址nexus/content/repositories/releases</url>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<url>私有maven仓库地址/nexus/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

</project>
